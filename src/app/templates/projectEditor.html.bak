<!DOCTYPE html>
{# 
	This is a Jinja2 template for an html page
	These lines are comments and are removed when the template is rendered. 
#}
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>MiniCMS</title>
  <link rel="stylesheet" href="/static/index.css">
</head>
<body>
	<div class="grid">
		{% include 'common_header.html' %}

		{# the left sidebar #}
		{% include 'common_lsidebar.html' %}

		<main>
			<div id="mainContent">
				{# the editor itself, embedded in a form, with a post's contents, and operation buttons #}
				<form id="editorForm" method="post">
					<label for="NewProjectName">Project:</label>
  					<input type="text" id="NewProjectName" name="label" value="{{contentPost.name}}">
					<div class="editorContainer">
						<div id="editor">
							{{contentPost.text | safe}}
  						</div>
					</div>
				</form>
				<div id="authorName" class="fourColumns">
					<div class="fourCol0">
						Creator: {{contentPost.username}}
					</div>
					<div class="fourCol1">
						User Id: {{contentPost.userid}}
					</div>
					<div class="fourCol2">
						Created: {{projectCreated}}
					</div>
				</div>
                
                <div id="membersTop">
                    <h2>Project members:</h2>
                    <a href="#" class="button g5" onclick="ToggleProjectMemberSet()">Show / Hide Project Members</a>
                </div>
                <div id="projectMembersHeader">
                    <div class="divProjMembershipGridParent">
                        <div class="ProjMembershipGrid0">
                            Username:
                        </div>
                        <div class="ProjMembershipGrid1">
                            Roles & Projects:
                        </div>
                        <div class="ProjMembershipGrid2">
                            Add/Remove/Invite To/From/To Project:
                        </div>
                    </div>
                </div>
                <div id="projectMembers" class="resizeable">
                    <div class="divProjMembershipGridParent">
                        <div class="ProjMembershipGrid0">
                            username
                        </div>
                        <div class="ProjMembershipGrid1">
                            user roles
                        </div>
                        <div class="ProjMembershipGrid2">
                            add/remove project
                        </div>
                    </div>
                </div>

                <div id="uploadDownloadTop">
                    <h2>Project Files:</h2>
                    <a href="#" class="button g5" id="showHideUploadsDownloads" onclick="ToggleUploadDownloadSet()">Show / Hide Project File Controls</a>
                </div>
                <script>gUpDownProjId = "{{contentPost.projectid}}";</script>
				{% include 'common_uploadDownloadSet.html' %}

				<div id="statusList">
					<div id="statusSelectionDiv">
						<label for="statusSelectBox">Status:</label>
						<select id="statusSelectBox" onchange="onStatusSelectChangeFunc();">
							<option value="unpublished">Unpublished</option>
    						<option value="published">Published</option>
						</select>
					</div>
					<div id="statusSelectionMsg">
						Unpublished projects are not shown to others. Unpublished projects are 
						only visible to the author. Published projects are visible to users with 
						the same access roles as the project as well as the project author. 
					</div>
				</div>

				<div>
					<label for="ProjectTag">Project Tag:</label>
  					<input type="text" id="ProjectTag" name="label" value="{{projectTag}}">
					<div id="TagsMsg">
						Please choose a <b>tag</b> for this <b>Project</b>. 
						<b>Memos</b> created for this <b>Project</b> will
						automatically receive this <b>tag</b>, and the <b>tag</b> will serve as 
						the <b>Account Role</b> granting users access to this <b>Project</b> and it's 
						information.
						<b>Tags</b> are single words used to aid searching for <b>Project Memos</b> 
						while also providing <b>User Project Access control.</b>
					</div>
				</div>

				<div id="divBeneathTheEditor">
					<a href="#" class="button" onclick="ProjectEditCancel()">Cancel</a>
					<a href="#" class="button" onclick="ProjectUpdate()">Update</a>
					<a href="#" class="button" onclick="ProjectDelete()">Delete</a>
				</div>
			</div>
		</main>

		<aside>
			<div id="aside">
				<a href="#" class="button" onclick="Login()">Login</a>
			</div>
		</aside>
  
	<footer>
		{{ frags[0].footer | safe }} 
	</footer>
	</div>

	{% include 'common_ifAccessDo.html' %}

	
	<!-- for html syntax hilighting -->
	<link
  		rel="stylesheet"
  		href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/github.min.css"
	/>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js"></script>
	<script
  		charset="UTF-8"
  		src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/languages/xml.min.js">
	</script>

	{% include 'common_editStyle.html' %}

    <!-- include the TinyMCE editor 
	<script src="https://cdn.tiny.cloud/1/tpl8zzz2nyqln68299z0tf9u4m2p3hi6c9qxgr7gal0i454q/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
	-->
	<script src="/static/tinymce/js/tinymce/tinymce.min.js"></script>

	<script>

        // configure the TinyMCE editor 
        tinymce.init({
            selector: '#editor',
			content_style: "body { font-size: 14pt; font-family: sans-serif; }",
            convert_urls: false,
            plugins: 'anchor autolink charmap code codesample emoticons image link lists media searchreplace table visualblocks wordcount',
            toolbar: 'undo redo | code | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
        });


		document.addEventListener( "DOMContentLoaded", function(){page_init();} );
	
		let gUser = {};     // current user 
        let gUsers = {};    // all users
		let gUsersLoaded = false;
        let gInvites = {};    // this project's invites
		let gInvitesLoaded = false;

		function page_init_work(userdata) {

			ToggleProjectMemberSet();
			ToggleUploadDownloadSet();

			gUser = userdata;

			// user is logged in:

			// change right sidebar links:							
			document.getElementById("aside").innerHTML = 
							`<a href="#" class="button" onclick="Profile()">Profile</a>
							 <br/><br/>
							 <a href="#" class="button" onclick="UserSettings()">Settings</a>
							 <br/><br/>
							 <a href="#" class="button" onclick="Logout()">Logout</a>
							`;

			// make sure project status is reflected in the selection widget:
			let statusSelectBox = document.getElementById("statusSelectBox")
			if ("{{contentPost.status}}" == 'archived') {
				// project is archived, so modify the status selection to only have an 'archived' option:
				for (let i = statusSelectBox.options.length; i >= 0; i--) {
					statusSelectBox.remove(i);
				}
				var optn = document.createElement("OPTION");
				optn.text = 'Archived';
				optn.value = 'archived';
				statusSelectBox.options.add(optn);
				//
				// more items that ought to be disabled because we're archived:
				statusSelectBox.disabled = true;
				document.getElementById("NewProjectName").disabled = true;
				document.getElementById("NewUploadInput").disabled = true;
				document.getElementById("ProjectTag").disabled = true;
				document.getElementById("divBeneathTheEditor").innerHTML = 
							`<a href="#" class="button" onclick="ProjectEditCancel()">Cancel</a>
							`;			
				document.getElementById("NewUploadInput").disabled = true;
			}
			statusSelectBox.value = "{{contentPost.status}}"

			if (Number("{{contentPost.projectid}}") == 0) {

				// we're creating a new project, all logged in users are allowed: 
				if (userdata.hasOwnProperty('roles')) {
					/* if (!userdata.roles.includes('admin')) {
						// only admins can create projects: 
						window.location.href = '/';
					} */
				}
				else { // user should not be here, not logged in:
					window.location.href = '/';
				} 

				// user is allowed, so change the button options:
				document.getElementById("divBeneathTheEditor").innerHTML =
					`<a href="#" class="button" onclick="ProjectEditCancel()">Cancel</a>
					 <a href="#" class="button" onclick="ProjectSubmit()">Create A New Project</a>
					`; 

				document.getElementById("membersTop").style.display = "none";
				//
				document.getElementById("projectMembersHeader").innerHTML =
					`<em>Create the project first.</em>
						 After the project is saved, editing shows Project Member and File Upload/Download/Embed controls.`;
				//
				document.getElementById("projectMembers").style.display = "none";

				document.getElementById("uploadDownloadTop").innerHTML = '';
				//
				document.getElementById("uploadDownloadSet").style.display = "none";

			} /* */
			else { // we are editing an existing project:

				if (userdata.hasOwnProperty('roles')) {
					if (!userdata.roles.includes("{{contentPost.name}}") && 
					    !userdata.roles.includes('admin') &&
						(Number("{{contentPost.userid}}") != userdata.userid)) {
						// this user does not have permission to see or edit this project 
						window.location.href = '/';
					}
				}
				else { // user should not be here:
					window.location.href = '/';
				}

				// site config can't be deleted anyway:
				if (Number("{{contentPost.projectid}}")==1) {
					document.getElementById("divBeneathTheEditor").innerHTML = 
							`<a href="#" class="button" onclick="ProjectEditCancel()">Cancel</a>
							 <a href="#" class="button" onclick="ProjectUpdate()">Update</a>
							`;	
				}

				document.getElementById("ProjectTag").disabled = true; // project tag not editible   
				//
				document.getElementById("TagsMsg").innerHTML = 
					`Created <b>Project</b> cannot have their <b>tag</b> changed. 
					<b>Memos</b> created for this <b>Project</b> automatically receive 
					this <b>tag</b>, and the <b>tag</b> serves as an <b>Account Role</b> within 
					user accounts granting access to this <b>Project</b> and it's information.
					<b>Tags</b> are single words used to aid searching for <b>Project Memos</b> 
					while also providing <b>User Project Access control.</b>
					`;

				get_project_invites();

				get_users();                         // get all the users and populate the project membership controls
	
				get_uploads("{{contentPost.projectid}}"); // read and then populate the upload links grid
			}


		}
		//
		function page_init() {
			ifAccessDoWithUser(page_init_work);
		}

	    // get list of users and populate project membership controls:
		const get_project_invites = () => {
			gInvitesLoaded = false;
			fetch("/proj_invite/project/{{contentPost.projectid}}", { // GET endpoint
				method: 'GET',
				headers: {}
			}).then(
				response => response.json() // if the response is a JSON object
			).then(
				// Handle the success response object
				success => {
					console.log( success )  
					//
					gInvites = success;       // remember API return data
					gInvitesLoaded = true;
                    //
					if (gUsersLoaded) {
						UpdateProjectUsersUI();
					}
				}
			).catch(
				error => {
					console.log( error ) // Handle the error response object
				}
			);
		}	  

        // get list of users and populate project membership controls:
		const get_users = () => {
			gUsersLoaded = false;
			fetch('/users', { // GET endpoint
				  method: 'GET',
				  headers: {}
			}).then(
				  response => response.json() // if the response is a JSON object
			 ).then(
                  // Handle the success response object
				  success => {
					console.log( success )  
					//
					gUsers = success;       // remember API return data
					gUsersLoaded = true;
                    //
					if (gInvitesLoaded) {
						UpdateProjectUsersUI();
					}
				}
			 ).catch(
				  error => {
					console.log( error ) // Handle the error response object
				}
			);
		};

		  // this is the list of project members, with the add/remote/invite buttons
		function UpdateProjectUsersUI() {
			let divProjectMembers = document.getElementById("projectMembers")
			divProjectMembers.innerHTML = '';

			let isAdmin = ("{{isAdmin}}" == 'True');
			let ownerId = Number("{{contentPost.userid}}");

			for (let i = 0; i < gUsers.length; i++) {
				let username = gUsers[i].username;
				let roles = gUsers[i].roles;
                let userid = gUsers[i].userid;
				let isOwner = (ownerId == userid);
				let isCurrUser = (gUser.userid == userid);

				let has_invite = false;
				let the_invite = {};
				for (let k = 0; k < gInvites.length; k++)
					if (gInvites[k].touserid == userid) {
						the_invite = gInvites[k];
						has_invite = true;
					}

                let actionBttn = "";
				
				let isMember =  roles.includes("{{projectTag}}");
				if (isAdmin) {
					if (isMember) {
						if (!isOwner) {
							actionBttn = `<a href="#" class="button" onclick="RemoveUserProject(${userid})">Remove from Project</a>`;
						}
						else {
							actionBttn = "<em>project owner</em>"
						}
					}
					else {
						if (has_invite) {
							if (isCurrUser) {
								if (the_invite.status == 0) {
									actionBttn =  `<a href="#" class="button" onclick="AcceptProjectInvite(${the_invite.inviteid})">Accept Invitation</a> ` +
										  		  `<a href="#" class="button" onclick="DeclineProjectInvite(${the_invite.inviteid})">Decline Invitation</a>`
								}
								else if (the_invite.status == 1) {
									actionBttn = "Invitation accepted"
								}
								else if (the_invite.status == 2) {
									actionBttn = "Invitation declined"
								}
							}
							else {
								if (the_invite.status == 0) {
									actionBttn = "Invite sent, waiting response"
								}
								else if (the_invite.status == 1) {
									actionBttn = "Invitation accepted"
								}
								else if (the_invite.status == 2) {
									actionBttn = "Invitation declined"
								}
							}
						}
						else {
							actionBttn =  `<a href="#" class="button" onclick="AddUserProject(${userid})">Add to Project</a> ` +
										  `<a href="#" class="button" onclick="InviteUserProject(${userid})">Invite to Project</a>`
						}
					}
				}
				else {
					if (!isMember) {
						if (has_invite) {
							if (the_invite.status == 0) {
								if (isCurrUser) {
									actionBttn =  `<a href="#" class="button" onclick="AcceptProjectInvite(${the_invite.inviteid})">Accept Invitation</a> ` +
										  		  `<a href="#" class="button" onclick="DeclineProjectInvite(${the_invite.inviteid})">Decline Invitation</a>`
								}
								else {
									actionBttn = "Invite sent, waiting response"
								}
							}
							else if (the_invite.status == 1) {
								actionBttn = "Invitation accepted"
							}
							else if (the_invite.status == 2) {
								actionBttn = "Invitation declined"
							}
						}
						else {
							if (!isOwner) {
								actionBttn = `<a href="#" class="button" onclick="InviteUserProject(${userid})">Invite to Project</a>`;
							}
							else {
								actionBttn = "<em>project owner</em>"
							}
						}
					}
					else {
						if (isOwner) {
							actionBttn = "<em>project owner</em>"
						}
					}
				}

				let markup = `
				<div class="divProjMembershipGridParent">
					<div class="ProjMembershipGrid0">
						<b>${username}</b>
					</div>
					<div class="ProjMembershipGrid1">
						${roles}
					</div>
					<div class="ProjMembershipGrid2">
						${actionBttn}
					</div>
				</div>`;

				divProjectMembers.innerHTML += markup;
			}
		}

        function InviteUserProject( userid ) {
			if ("{{contentPost.status}}" == "archived") {
				alert( 'Archived Projects cannot be modified.' )
				return;
			}
			// post as new invite submission:
			const params = {
				"projectid": "{{contentPost.projectid}}", 
				"tag": "{{projectTag}}",
				"touserid": userid
			};
            const options = {
                method: 'POST',
                headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', },
                body: JSON.stringify( params )  
            };
            fetch( "/proj_invite/", options )
                .then( response => response.json() )
                .then( response => {
                    // Do something with response.
                    console.log( response )
                    if (response.hasOwnProperty('detail')) {
                        alert( 'Please fix the following and try again: ' + response.detail )
                    }
                    else {
                        // window.location.reload();
						get_project_invites();
                    }
                })
                .catch(err => {
                    // Do something with the error
                    console.log(err) 
                    alert( err )
                }) 
        }

		function ReturnProjectInvite( inviteid, response ) {
			if ("{{contentPost.status}}" == "archived") {
				alert( 'Archived Projects cannot be modified.' )
				return;
			}
			
			// response is 1 for accept and 2 for decline
			const params = { "status": response };
			//
			const options = {
				credentials: 'include',
				method: 'PUT', // Method itself
				headers: {
				 		'Content-type': 'application/json; charset=UTF-8', // Indicates the content 
				 		// "Authorization": "Bearer " + access_token // only needed when JWT is not in cookie
				},
				body: JSON.stringify(params) // We send data in JSON format
			}

			// make the HTTP put request using fetch api
			let domain = (new URL(window.location));
			const prebsjnk = domain.origin;
			const furl = prebsjnk + '/proj_invite/' + inviteid;

            fetch( furl, options )
                .then( response => response.json() )
                .then( response => {
                    // Do something with response.
                    console.log( response )
                    if (response.hasOwnProperty('detail')) {
                        alert( 'Please fix the following and try again: ' + response.detail )
                    }
                    else {
                        window.location.reload();
                    }
                })
                .catch(err => {
                    // Do something with the error
                    console.log(err) 
                    alert( err )
                }) 
        }
		function AcceptProjectInvite( inviteid ) {
			ReturnProjectInvite( inviteid, 1 );
		}
		function DeclineProjectInvite( inviteid ) {
			ReturnProjectInvite( inviteid, 2 );
		}

        function UpdateUserRoles( userid, params ) {
			if ("{{contentPost.status}}" == "archived") {
				alert( 'Archived Projects cannot be modified.' )
				return;
			}
            const options = {
                method: 'POST',
                headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', },
                body: JSON.stringify( params )  
            };
            fetch( `/users/roles/${userid}`, options )
                .then( response => response.json() )
                .then( response => {
                    // Do something with response.
                    console.log( response )
                    if (response.hasOwnProperty('detail')) {
                        alert( 'Please fix the following and try again: ' + response.detail )
                    }
                    else {
                        window.location.reload();
                    }
                })
                .catch(err => {
                    // Do something with the error
                    console.log(err) 
                    alert( err )
                }) 
        }

		function FindUser( userid ) {
			let user = null;
            for (let i = 0; i < gUsers.length; i++) {
                if (gUsers[i].userid == userid) {
                    user = gUsers[i];
                    break;
                }
            }
			return user;
		}

        function AddUserProject( userid ) {
			if ("{{contentPost.status}}" == "archived") {
				alert( 'Archived Projects cannot be modified.' )
				return;
			}
            let user = FindUser( userid );
            if (user != null) {
                // post user role update:
			    const params = {
				    "text": user.roles + " {{projectTag}}",
			    };
                //
                UpdateUserRoles( userid, params );
            }
        };

        function RemoveUserProject( userid ) {
			if ("{{contentPost.status}}" == "archived") {
				alert( 'Archived Projects cannot be modified.' )
				return;
			}
            let user = FindUser( userid );
            if (user != null) {
                // post user role update:
			    const params = {
				    "text": user.roles.replace(" {{projectTag}}", "")
			    };
                //
                UpdateUserRoles( userid, params );
            }
        };

		  // called when user clicks the "Show / Hide Project Members" button
		
		  function ToggleProjectMemberSet() {
			const toggle = (e) => {
				if (e.style.display === "none") {
					e.style.display = "block";
				  } else {
					e.style.display = "none";
				  }
			};

			let elem = document.getElementById("projectMembersHeader");
			toggle(elem);
			
			elem = document.getElementById("projectMembers")
			toggle(elem);
		}

		function ProjectEditCancel() { 
			if (Number("{{ contentPost.projectid }}") > 0) {
				window.location.href = "/projectPage/{{ contentPost.projectid }}"; 
			}
			else {
				window.location.href = "/profile"; 
			}
		}

		function ProjectSubmitWork() {
			// get the project name:
			let NewProjectName = document.getElementById("NewProjectName").value;
			// Get HTML content
			let newProjectDesc = tinymce.get("editor").getContent();
			// get the project status:
			let newPostStatus = document.getElementById("statusSelectBox").value;
			// get the project tag:
			let newProjectTag = document.getElementById("ProjectTag").value;

			// post as new project submission:
			const params = {
				"name": NewProjectName, 
				"text": newProjectDesc,
				"tag": newProjectTag
			};
            //
			const options = {
				method: 'POST',
				headers: {
					  'Accept': 'application/json',
					  'Content-Type': 'application/json',
				},
				body: JSON.stringify( params )  
			};
			fetch( '/project/', options )
				.then( response => response.json() )
				.then( response => {
					// Do something with response.
					// console.log( response )
					if (response.hasOwnProperty('detail')) {
						alert( 'Please fix the following and try again: ' + response.detail )
					}
					else if (response.hasOwnProperty('projectid')) {
						window.location.href = "/projectPage/" + response.projectid;
					}
					else {
						console.log( response )
					}
				})
				.catch(err => {
					// Do something with the error
					console.log(err) 
					alert( err )
					// window.location.href = "/projectPage/{{ contentPost.userid }}";
				}) 
		}
		function ProjectSubmit() {
			ifAccessDo(ProjectSubmitWork);
		}

		function ProjectUpdateWork() {
			if ("{{contentPost.status}}" == "archived") {
				alert( 'Archived Projects cannot be modified.' )
				return;
			}

			let updatedStatus = document.getElementById("statusSelectBox").value;

			const someData = {
				"name": document.getElementById("NewProjectName").value, 
				"text": tinymce.get("editor").getContent(),
				"status": updatedStatus, 
				"userid": gUser.userid,
				"username": gUser.username,
				"tagid": "{{ contentPost.tagid }}", 
			}
			//
			const options = {
				credentials: 'include',
				method: 'PUT', // Method itself
				headers: {
				 		'Content-type': 'application/json; charset=UTF-8', // Indicates the content 
				 		// "Authorization": "Bearer " + access_token // only needed when JWT is not in cookie
				},
				body: JSON.stringify(someData) // We send data in JSON format
			}
			   
			// make the HTTP put request using fetch api
			let domain = (new URL(window.location));
			const prebsjnk = domain.origin;
			const furl = prebsjnk + '/project/{{ contentPost.projectid }}';
			fetch(furl, options) 
			// .then(response => response.json())
			.then(response => 
			{
				if (response.ok) {
					window.location.href = "/projectPage/{{ contentPost.projectid }}";
				}
				else {
					alert( 'Problem updating project.' )
				}
			}) 
			.catch(err => {
				// Do something with the error
				console.log(err) 
				alert( err )
				window.location.href = "/memoPage/{{ contentPost.projectid }}";
			}) 
		}
		function ProjectUpdate() {
			ifAccessDo(ProjectUpdateWork);
		}

		function ProjectDeleteWork() {
			const options = { 
				method: 'DELETE',
				// headers: { "Authorization": "Bearer " + access_token } // only needed when JWT is not in cookie
			};
			fetch( '/project/{{ contentPost.projectid }}', options )
				.then( response => response.json() )
				.then( response => {
					// Do something with response:
					console.log( response )
					if (response.projectid != '{{ contentPost.projectid }}')
					{ 
						console.log( "DELETE ERROR!" )
						alert( "DELETE ERROR!" )
						
					}
					window.location.href = "/";

				} )
				.catch(err => {
					// Do something with the error
					console.log(err) 
					alert( err )
					window.location.href = "/projectPage/{{ contentPost.projectid }}";
				});
		}
		function ProjectDelete() {
			ifAccessDo(ProjectDeleteWork);
		}


		// called when the status dropdown selection changes:
		function onStatusSelectChangeFunc() {
			let statusSelectBox = document.getElementById("statusSelectBox")
			let selected = statusSelectBox.value;
		}


		function Profile() { window.location.href = "/profile"; }

		function UserSettings() { window.location.href = "/settings"; }

	</script>

	{% include 'common_logout.html' %}

	{% include 'common_refresh.html' %}


</body>
</html>
