<!DOCTYPE html>
{# 
	This is a Jinja2 template for an html page
	These lines are comments and are removed when the template is rendered. 
#}
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>MiniCMS</title>
  <link rel="stylesheet" href="/static/index.css">

</head>
<body onload="slidesInit()">
	<div class="grid">
		{% include 'common_header.html' %}

		{# the left sidebar #}
		{% include 'common_lsidebar.html' %}

		{# the main content area #}
		<main>
			<div id="mainContent">
				{# title and post contents, with various controls #}
				<H2> Project: <a href="#" onclick="ProjectPage()">{{parentName}}</a> </H2>
				<H1> Memo: {{contentPost.title}} </H1>
				<div class="ql-editor">
					{{contentPost.text | safe}}
				</div>
                <div class="postMetadata">
				    <h5 class="g1">Author: {{contentPost.username}}</h5>
				    <h5 class="g2">Status: {{contentPost.status}}</h5>
				    <h5 class="g3">Access: {{contentPost.access}}</h5>
				    <h5 class="g4">Created: {{memoCreated}}</h5>
				    <h5 class="g5">Updated: {{memoUpdated}}</h5>
                </div>
                <div>
				    <h5>Tags: {{contentPost.tags}}</h5>
                </div>
			</div>

			<div class="twoColumnsMargined"  id="commentsTop">
				<h2 class="twoCols0">Comments:</h2>
				<a href="#" class="button twoCols1" onclick="ToggleCommentEditor()">Show / Hide New Comment Editor</a>
			</div>

            <div id="existingComments">
                No comments yet; be the first to comment...!
            </div>

			<div id="commentEditorContainer">
				<form id="editorForm" method="post">
					<div class="editorContainer">
						<div id="editor">
							comment...
						</div>
					</div>
				</form>
				<a href="#" class="button" onclick="PostComment()">Post Comment</a>
				<p> Keep comments on topic, referencing either the memo, prior comments, or on topic issues and
					information relevant to the project. <br/>
					Note that comments cannot be edited or deleted, so write professionally. 
				</p>
			</div>

			<div class="twoColumnsMargined">
				<h2 class="twoCols0">Project Files:</h2>
				<a href="#" class="button twoCols1" id="showHideUploadsDownloads" onclick="ToggleUploadDownloadSet()">Show / Hide Uploads & Links</a>
			</div>
			<script>gUpDownProjId = "{{contentPost.projectid}}";</script>
			{% include 'common_uploadDownloadSet.html' %}

		</main>

		{# the right sidebar #}
		<aside>
			<div id="aside">
				<a href="#" class="button" onclick="Login()">Login</a>
				<br/>
				<a href="#" class="button" onclick="Register()">Register</a>
			</div>
		</aside>
  
	<footer>
		{{ frags[0].footer | safe }} 
	</footer>
	</div>

	{% include 'common_slides.html' %}

	{% include 'common_editStyle.html' %}

    <!-- include the TinyMCE editor 
	<script src="https://cdn.tiny.cloud/1/tpl8zzz2nyqln68299z0tf9u4m2p3hi6c9qxgr7gal0i454q/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
	-->
	<script src="/static/tinymce/js/tinymce/tinymce.min.js"></script>
	
	<script>

		document.addEventListener("DOMContentLoaded", function() {
			page_init();
			slidesInit();
			setTimeout( slidesInit, 3000 );
		});
		//
		gUser = {};
		//
		function page_init() {

			ToggleCommentEditor();
			ToggleUploadDownloadSet();

			const access_token = localStorage.getItem('token');
			if (typeof access_token !== 'undefined') {
				
				const options = { headers: { "Authorization": "Bearer " + access_token } }
				fetch("/users/me", options)
				.then(response => response.json())
				.then( response =>  {

					gUser = response;

					if (gUser.hasOwnProperty('roles')) {

						// user is logged in, change right sidebar links:
						document.getElementById("aside").innerHTML = 
						`<a href="#" class="button" onclick="UserProfile()">Profile</a>
						<br/><br/>
						<a href="#" class="button" onclick="UserSettings()">Settings</a>
						<br/><br/>
						<a href="#" class="button" onclick="Logout()">Logout</a>
						`;

						let status = "{{contentPost.status}}";
						if (gUser.userid == '{{ contentPost.userid }}') {
							// user is author
							if (status.includes('unpublished')) {
								// memo is unpublished:
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="MemoEdit()">Edit Unpublished Memo</a>';
	
							}
							else if (gUser.roles.includes("admin")) {
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="MemoEdit()">Edit Published Memo</a>';
							}
						}
						else if (gUser.roles.includes("admin")) {
							// user is admin:
							if (status.includes('unpublished')) {
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="MemoEdit()">Edit Unpublished Memo (not your memo)</a>';
							}
							else if (status.includes('published')) {
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="MemoEdit()">Edit Published Memo (not your memo)</a>';
							}
						} 

						if (status.includes('unpublished')) {
							document.getElementById("existingComments").innerHTML = 
								'<p>Commenting available after memo is published</p>';
							
							document.getElementById("commentEditorContainer").style.display = 'none';
						}
						else {
							LoadComments();
							get_uploads("{{contentPost.projectid}}"); // gets project uploads and populates their place on the project page
						}
					}
					else {
						// something is wrong, user should not be on this page:
						gUser = {};
						window.location.href = "/";
					}
				});
			}
			else {
				// user is not logged in
				document.getElementById("commentsTop").style.display = 'none';
				document.getElementById("existingComments").style.display = 'none';
				document.getElementById("commentEditorContainer").style.display = 'none';
			}
		}

        // configure the TinyMCE editor for comments:
        tinymce.init({
            selector: '#editor',
			content_style: "body { font-size: 14pt; font-family: sans-serif; }",
            height: 200,
            convert_urls: false,
            plugins: 'autolink emoticons image media link lists searchreplace visualblocks wordcount',
            menubar: false,
            toolbar: 'undo redo | bold italic underline strikethrough | link image media | align | checklist numlist bullist indent outdent | emoticons | removeformat',
            });
        

		function LoadComments() {
			fetch("/comment/memo/{{contentPost.memoid}}", { method: 'GET', headers: {} })
			.then(response => response.json())
			.then( response =>  {
				let commList = response;
				console.log( commList );

				let limit = commList.length;
				if (limit>0) {
					let commHtml = '';
					for (let i = 0; i < limit; i++) {
						let comm = commList[i];
						commHtml += '<div class="comment">';
						commHtml += '<div>';
						commHtml += '<h5>On ';
						let createTime = new Date(comm.created_date + 'Z');  // the 'Z' says this is UTC 
						commHtml += createTime.toDateString();
						commHtml += ' at ';
						commHtml += createTime.toTimeString();
						commHtml += ' <b>';
						commHtml += comm.username;
						commHtml += '</b> adds:</h5>';
						commHtml += '</div>';
						commHtml += comm.text;
						commHtml += '</div>';
					}
					document.getElementById("existingComments").innerHTML = commHtml;
				}
			});
		}

		function PostComment() {
			if (gUser.hasOwnProperty('roles')) {

				// Get comment's html content
				var newCommentHTML = tinymce.get("editor").getContent();

				// post as new comment submission:
				const params = {
					"text": newCommentHTML, 
					"memoid": "{{ contentPost.memoid }}",
					"userid": gUser.userid,
					"username": gUser.username,
					"parent": 0,
				};

				const options = {
					method: 'POST',
					headers: {
						  'Accept': 'application/json',
						  'Content-Type': 'application/json',
					},
					body: JSON.stringify( params )  
				};
				fetch( '/comment/', options )
					.then( response => response.json() )
					.then( response => {
						// Do something with response.
						console.log( response )
						if (response.hasOwnProperty('detail')) {
							alert( 'Please fix the following and try again: ' + response.detail )
						}
						else {
							// reload the page to see the new comment
							window.location.reload();
						}
					})
					.catch(err => {
						// Do something with the error
						console.log(err) 
						alert( err )
						// window.location.href = "/memoPage/{{ contentPost.userid }}";
					}) 
			}
			else {
				// something is wrong, user should not be on this page:
				gUser = {};
				window.location.href = "/";
			}
		}
            
		// called when user clicks the "Show / Hide New Comment Editor" button
		function ToggleCommentEditor() {
			const toggle = (e) => {
				if (e.style.display === "none") {
					e.style.display = "block";
				  } else {
					e.style.display = "none";
				  }
			};

			let elem = document.getElementById("commentEditorContainer");
			toggle(elem);
		}

		function ProjectPage() { window.location.href = "/projectPage/{{ contentPost.projectid }}"; }

		function ProjectEdit() { window.location.href = "/projectEditor/{{ contentPost.projectid }}"; }

		function MemoEdit() { window.location.href = "/memoEditor/{{ contentPost.memoid }}"; }

		function Login() { window.location.href = "/login"; }

		function Register() { window.location.href = "/register"; }

		function UserSettings() { window.location.href = "/settings"; }

		function UserProfile() { window.location.href = "/profile"; }

	</script>

	{% include 'common_logout.html' %}

	{% include 'common_refresh.html' %}
	
</body>
</html>
