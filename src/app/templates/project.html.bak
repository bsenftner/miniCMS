<!DOCTYPE html>
{# 
	This is a Jinja2 template for an html page
	These lines are comments and are removed when the template is rendered. 
#}
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
  <title>MiniCMS</title>
  <link rel="stylesheet" href="/static/index.css">

</head>
<body onload="slidesInit()">
	<div class="grid">
		{% include 'common_header.html' %}

		{# the left sidebar #}
		{% include 'common_lsidebar.html' %}

		{# the main content area #}
		<main>
			<div id="mainContent">
				{# title and post contents, with an optional edit button #}
				<H1> Project: {{contentPost.name}} </H1>
                <div class="ql-editor resizeable">
					{{contentPost.text | safe}}
				</div>
                <div class="postMetadata">
				    <h5 class="g1">Project Description</h5>
				    <h5 class="g2">Creator: {{contentPost.username}}</h5>
				    <h5 class="g3">Status: {{contentPost.status}}</h5>
				    <h5 class="g4">Project Tag: {{projectTag}}</h5>
				    <h5 class="g5">Created: {{projectCreated}}</h5>
                </div>
			</div>
			<div class="twoColumns"  id="membersTop">
				<h2 class="twoCols0">Project members:</h2>
				<a href="#" class="button twoCols1" onclick="ToggleProjectMemberSet()">Show / Hide Project Members</a>
			</div>
            <div id="projectMembersHeader">
                <div class="divProjMembershipGridParent">
                    <div class="ProjMembershipGrid0">
                        Username:
                    </div>
                    <div class="ProjMembershipGrid1">
                        Roles & Projects:
                    </div>
                </div>
            </div>
            <div id="projectMembers" class="resizeable">
                <div class="divProjMembershipGridParent">
                    <div class="ProjMembershipGrid0">
                        username
                    </div>
                    <div class="ProjMembershipGrid1">
                        user roles
                    </div>
                </div>
            </div>

			<div class="twoColumns">
				<h2 class="twoCols0">Project Files:</h2>
				<a href="#" class="button twoCols1" id="showHideUploadsDownloads" onclick="ToggleUploadDownloadSet()">Show / Hide Project Files</a>
			</div>
            <script>gUpDownProjId = "{{contentPost.projectid}}";</script>
			{% include 'common_uploadDownloadSet.html' %}

			<div class="twoColumns">
				<h2 class="twoCols0">Project Memos:</h2>
				<a href="#" class="button twoCols1" id="newMemoBttn" onclick="NewProjectMemo()">New Project Memo</a>
			</div>
			<div id="projectMemoList">
				{% for m in memos %} 
					<h3><a href="/memoPage/{{ m.memoid }}">{{ m.title }}</a></h3>
				{% endfor %}
			</div>

			<div id="aiGotoWrapper">
				<p><b>MiniCMS</b> has an experimental <em>AI Attorney</em> using a form of <em>Transfer Learning</em> for legal question and 
				answer exchanges. This is built on top of<b> OpenAI ChatGPT-4</b>. Note that <b>ChatGPT-4</b> passes the <em>CA State Bar Exam</em> 
				with high marks. However, any AI answers should be human vetted for accuracy; the AI <em>is experimental</em>.
			    </p>
				<p>For best results, use the AI within this defined role of an Attorney seeking to explain to a potential client their legal options.
					Explain the client situation clearly using ordinary language, as if you are explaining to a friend. Include all participants 
					and their activities, if known. Include general questions first. The conversation's context is maintained, so you can ask 
					additional questions as well as provide more information as the conversation progresses.
				</p>
				<a href="#" class="button" id="aiChatsBttn" onclick="GotoAiChats()">Visit the AI Attorney</a>
			</div>
		</main>

		{# the right sidebar, gets filled by page_init() #}
		<aside>
			<div id="aside"></div>
		</aside>
  
	<footer>
		{{ frags[0].footer | safe }} 
	</footer>
	</div>

	{% include 'common_slides.html' %}

	{% include 'common_editStyle.html' %}

    <!-- include the TinyMCE editor 
	<script src="https://cdn.tiny.cloud/1/tpl8zzz2nyqln68299z0tf9u4m2p3hi6c9qxgr7gal0i454q/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
	-->
	<script src="/static/tinymce/js/tinymce/tinymce.min.js"></script>
	
	<script>

		document.addEventListener("DOMContentLoaded", function() {
			page_init();
			slidesInit();
			setTimeout( slidesInit, 3000 );
		});
		//
		let gUser = {};     // current user 
        let gMembers = {};  // all project members
		//
		function page_init() {

			ToggleProjectMemberSet();
			ToggleUploadDownloadSet();

			const access_token = localStorage.getItem('token');
			if (typeof access_token !== 'undefined') {
				
				const options = { headers: { "Authorization": "Bearer " + access_token } }
				fetch("/users/me", options)
				.then(response => response.json())
				.then( response =>  {

					gUser = response;

					if (gUser.hasOwnProperty('roles')) {

						// user is logged in, populate right sidebar:
						document.getElementById("aside").innerHTML = 
						`<a href="#" class="button" onclick="UserProfile()">Profile</a>
						<br/><br/>
						<a href="#" class="button" onclick="UserSettings()">Settings</a>
						<br/><br/>
						<a href="#" class="button" onclick="Logout()">Logout</a>
						`;

						let status = "{{contentPost.status}}";
						if (status == 'archived') {
							document.getElementById("NewUploadInput").disabled = true;
						}
						if (gUser.userid == '{{ contentPost.userid }}') {
							// user is author
							if (status.includes('unpublished')) {
								// project is unpublished:
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="ProjectEdit()">Edit Unpublished Project</a>';
	
							}
							else if (gUser.roles.includes("admin")) {
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="ProjectEdit()">Admin Edit Published Project</a>';
							}
							else {
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="ProjectEdit()">Author Edit Published Project</a>';
							}
						}
						else if (gUser.roles.includes("admin")) {
							// user is admin (and not author):
							if (status.includes('unpublished')) {
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="ProjectEdit()">Admin Edit Unpublished Project (not yours)</a>';
							}
							else if (status.includes('published')) {
								document.getElementById("mainContent").innerHTML += 
									'<a href="#" class="button" onclick="ProjectEdit()">Admin Edit Published Project (not yours)</a>';
							}
						} 
                        
                        // populates the project's user list
						get_users()

						get_uploads("{{contentPost.projectid}}"); // gets project uploads and populates their place on the project page
					}
					else {
						// something is wrong, user should not be on this page:
						gUser = {};
						window.location.href = "/";
					}
				});
			}
		}
                
		// called when user clicks the "Show / Hide Project Members" button
		function ToggleProjectMemberSet() {
			const toggle = (e) => {
				if (e.style.display === "none") {
					e.style.display = "block";
				  } else {
					e.style.display = "none";
				  }
			};

			let elem = document.getElementById("projectMembersHeader");
			toggle(elem);
			
			elem = document.getElementById("projectMembers")
			toggle(elem);
		}

        // get list of users and populate project membership controls:
		const get_users = () => {
			fetch('/users/{{projectTag}}', { // GET endpoint
				  method: 'GET',
				  headers: {}
			}).then(
				  response => response.json() // if the response is a JSON object
			 ).then(
                  // Handle the success response object
				  success => {
					console.log( success )  
					//
					gMembers = success;       // remember API return data
                    //
					let divProjectMembers = document.getElementById("projectMembers")
					divProjectMembers.innerHTML = '';

					for (let i = 0; i < gMembers.length; i++) {
                        let username = gMembers[i].username;
						let roles = gMembers[i].roles;
                        let isMember =  roles.includes("{{projectTag}}");
                        if (isMember) {
                            let markup = `
                                <div class="divProjMembershipGridParent">
                                    <div class="ProjMembershipGrid0">
                                        <b>${username}</b>
                                    </div>
                                    <div class="ProjMembershipGrid1">
                                        ${roles}
                                    </div>
                                </div>`;

						    divProjectMembers.innerHTML += markup;
                        }
					}
				}
			 ).catch(
				  error => {
					console.log( error ) // Handle the error response object
				}
			);
		}; /* */

		function ProjectEdit() { window.location.href = "/projectEditor/{{ contentPost.projectid }}"; }

		function NewProjectMemo() { 
			if ("{{contentPost.status}}" == 'archived') {
				alert( 'Archived Projects cannot have new memos.' )
				return;
			}
			window.location.href = "/newProjectMemo/{{ contentPost.projectid }}"; 
		}

		
		function GotoAiChats() { 
			if ("{{contentPost.status}}" == 'archived') {
				alert( 'Archived Projects cannot create new AI Attorney conversations.' )
				return;
			}
			window.location.href = "/newAiExchange/{{ contentPost.projectid }}"; 
		}


		function UserSettings() { window.location.href = "/settings"; }

		function UserProfile() { window.location.href = "/profile"; }

	</script>

	{% include 'common_logout.html' %}

	{% include 'common_refresh.html' %}
	
</body>
</html>
