version: "3.8"

networks:
  web:
    name: web
    external: true
    driver: overlay
    driver_opts:
      com.docker.network.driver.mtu: 1400
    attachable: true
  internal:
    name: internal
    external: false

services:

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=web"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.address=:80"
      - "--certificatesresolvers.myresolver.tailscale=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock
    networks:
      - web
      - internal

  web:
    build: ./src
    container_name: "web"
    command: |
      bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; uvicorn app.main:app --host 0.0.0.0 --port 8000'
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.rule=Host(`${MACHINENAME}.${TAILNET}`)
      - traefik.http.routers.web.tls.certresolver=myresolver
      - traefik.http.services.web.loadbalancer.server.port=8000
      - traefik.http.routers.web.entrypoints=websecure
    volumes:
      - type: bind
        source: ./src
        target: /home/app/web
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@db/${DB_NAME}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - web
      - internal
    depends_on:
      - redis

  db:
    # image: "postgres:latest"
    image: postgres:13-alpine
    container_name: "postgres"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}    
    networks:
      - internal

  worker:
    build: ./src
    command: celery -A app.worker.celery_app worker --loglevel=info --logfile=app/logs/celery.log
    volumes:
      - ./src:/home/app/web
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0 
    networks:
      - internal
    depends_on:
      - web
      - redis

  redis:
    image: redis:7 
    networks:
      - internal

  dashboard:
    build: ./src
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    ports:
      - 5556:5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - web
      - internal
    depends_on:
      - web
      - redis
      - worker

  

volumes:
  postgres_data:
